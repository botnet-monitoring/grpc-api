// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: storage.proto

package gen

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible reasons a client wants to end the session with.
type DisconnectReason int32

const (
	// The client wants to specify no reason to end the session.
	DisconnectReason_DISCONNECT_REASON_UNSPECIFIED DisconnectReason = 0
	// The client has done its purpose and thereby wants to end the session.
	DisconnectReason_DISCONNECT_REASON_FINISHED DisconnectReason = 1
	// The clients wants to end the session in order to reconnect soon.
	DisconnectReason_DISCONNECT_REASON_BE_RIGHT_BACK DisconnectReason = 2
	// The clients wants to end the session in order to reconnect soon with a new configuration.
	DisconnectReason_DISCONNECT_REASON_BE_RIGHT_BACK_WITH_NEW_CONFIG DisconnectReason = 3
	// The client had some error and thereby wants to the the session.
	DisconnectReason_DISCONNECT_REASON_CLIENT_ERROR DisconnectReason = 4
	// The client wants to end the session because of some other reason.
	DisconnectReason_DISCONNECT_REASON_OTHER DisconnectReason = 5
)

// Enum value maps for DisconnectReason.
var (
	DisconnectReason_name = map[int32]string{
		0: "DISCONNECT_REASON_UNSPECIFIED",
		1: "DISCONNECT_REASON_FINISHED",
		2: "DISCONNECT_REASON_BE_RIGHT_BACK",
		3: "DISCONNECT_REASON_BE_RIGHT_BACK_WITH_NEW_CONFIG",
		4: "DISCONNECT_REASON_CLIENT_ERROR",
		5: "DISCONNECT_REASON_OTHER",
	}
	DisconnectReason_value = map[string]int32{
		"DISCONNECT_REASON_UNSPECIFIED":                   0,
		"DISCONNECT_REASON_FINISHED":                      1,
		"DISCONNECT_REASON_BE_RIGHT_BACK":                 2,
		"DISCONNECT_REASON_BE_RIGHT_BACK_WITH_NEW_CONFIG": 3,
		"DISCONNECT_REASON_CLIENT_ERROR":                  4,
		"DISCONNECT_REASON_OTHER":                         5,
	}
)

func (x DisconnectReason) Enum() *DisconnectReason {
	p := new(DisconnectReason)
	*p = x
	return p
}

func (x DisconnectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisconnectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_storage_proto_enumTypes[0].Descriptor()
}

func (DisconnectReason) Type() protoreflect.EnumType {
	return &file_storage_proto_enumTypes[0]
}

func (x DisconnectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisconnectReason.Descriptor instead.
func (DisconnectReason) EnumDescriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{0}
}

// A type for carrying the 32bit session token.
type SessionToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual value (required).
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *SessionToken) Reset() {
	*x = SessionToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken) ProtoMessage() {}

func (x *SessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken.ProtoReflect.Descriptor instead.
func (*SessionToken) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{0}
}

func (x *SessionToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

// The request used for registering a monitoring session.
type RegisterSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The botnet id the current monitoring session is monitoring (required).
	BotnetId string `protobuf:"bytes,1,opt,name=botnet_id,json=botnetId,proto3" json:"botnet_id,omitempty"`
	// The campaign id the current monitoring session should be part of (optional).
	CampaignId *string `protobuf:"bytes,2,opt,name=campaign_id,json=campaignId,proto3,oneof" json:"campaign_id,omitempty"`
	// The used frequency for crawling/populating for the current monitoring session (optional).
	Frequency *uint32 `protobuf:"varint,3,opt,name=frequency,proto3,oneof" json:"frequency,omitempty"`
	// The public IP address the monitor uses for the current monitoring session (optional).
	PublicIp *IPAddress `protobuf:"bytes,4,opt,name=public_ip,json=publicIp,proto3,oneof" json:"public_ip,omitempty"`
	// The port the monitoring session uses to listen for other bots (optional).
	MonitorPort *Port `protobuf:"bytes,5,opt,name=monitor_port,json=monitorPort,proto3,oneof" json:"monitor_port,omitempty"`
	// Potential further configuration data for the current monitoring session (optional).
	ConfigJson *JSON `protobuf:"bytes,6,opt,name=config_json,json=configJson,proto3,oneof" json:"config_json,omitempty"`
}

func (x *RegisterSessionRequest) Reset() {
	*x = RegisterSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSessionRequest) ProtoMessage() {}

func (x *RegisterSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSessionRequest.ProtoReflect.Descriptor instead.
func (*RegisterSessionRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterSessionRequest) GetBotnetId() string {
	if x != nil {
		return x.BotnetId
	}
	return ""
}

func (x *RegisterSessionRequest) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *RegisterSessionRequest) GetFrequency() uint32 {
	if x != nil && x.Frequency != nil {
		return *x.Frequency
	}
	return 0
}

func (x *RegisterSessionRequest) GetPublicIp() *IPAddress {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *RegisterSessionRequest) GetMonitorPort() *Port {
	if x != nil {
		return x.MonitorPort
	}
	return nil
}

func (x *RegisterSessionRequest) GetConfigJson() *JSON {
	if x != nil {
		return x.ConfigJson
	}
	return nil
}

// The response the server sends when receiving a session registration request.
type RegisterSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 32bit session token for all further requests of this session (required).
	SessionToken *SessionToken `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// The timeout in seconds after which the server automatically ends the session (required).
	//
	// Precisely means: The session expires if the time since last message from the client is more than the timeout.
	SessionTimeout uint32 `protobuf:"varint,2,opt,name=session_timeout,json=sessionTimeout,proto3" json:"session_timeout,omitempty"`
	// The timestamp of the last successfully inserted bot reply (optional).
	//
	// Not set when there is no last entry (or the server might not want to add it for other reasons).
	LastInsertedBotReply *Timestamp `protobuf:"bytes,3,opt,name=last_inserted_bot_reply,json=lastInsertedBotReply,proto3,oneof" json:"last_inserted_bot_reply,omitempty"`
	// The timestamp of the last successfully inserted failed try (optional).
	//
	// Not set when there is no last entry (or the server might not want to add it for other reasons).
	LastInsertedFailedTry *Timestamp `protobuf:"bytes,4,opt,name=last_inserted_failed_try,json=lastInsertedFailedTry,proto3,oneof" json:"last_inserted_failed_try,omitempty"`
	// The timestamp of the last successfully inserted edge (optional).
	//
	// Not set when there is no last entry (or the server might not want to add it for other reasons).
	LastInsertedEdge *Timestamp `protobuf:"bytes,5,opt,name=last_inserted_edge,json=lastInsertedEdge,proto3,oneof" json:"last_inserted_edge,omitempty"`
}

func (x *RegisterSessionResponse) Reset() {
	*x = RegisterSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSessionResponse) ProtoMessage() {}

func (x *RegisterSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSessionResponse.ProtoReflect.Descriptor instead.
func (*RegisterSessionResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterSessionResponse) GetSessionToken() *SessionToken {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *RegisterSessionResponse) GetSessionTimeout() uint32 {
	if x != nil {
		return x.SessionTimeout
	}
	return 0
}

func (x *RegisterSessionResponse) GetLastInsertedBotReply() *Timestamp {
	if x != nil {
		return x.LastInsertedBotReply
	}
	return nil
}

func (x *RegisterSessionResponse) GetLastInsertedFailedTry() *Timestamp {
	if x != nil {
		return x.LastInsertedFailedTry
	}
	return nil
}

func (x *RegisterSessionResponse) GetLastInsertedEdge() *Timestamp {
	if x != nil {
		return x.LastInsertedEdge
	}
	return nil
}

// The type which holds exactly one bot reply.
//
// This message will be just used to fill batches which in turn will be sent.
type DatedBotReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp the bot reply was observed (required).
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The bot's ID, if any in the respective botnet (optional).
	BotId *string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3,oneof" json:"bot_id,omitempty"`
	// The IP address of the bot (required).
	Ip *IPAddress `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// The port of the bot (required).
	Port *Port `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// Potential other interesting data observed with the bot reply (optional).
	OtherData *JSON `protobuf:"bytes,5,opt,name=other_data,json=otherData,proto3,oneof" json:"other_data,omitempty"`
}

func (x *DatedBotReply) Reset() {
	*x = DatedBotReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatedBotReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatedBotReply) ProtoMessage() {}

func (x *DatedBotReply) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatedBotReply.ProtoReflect.Descriptor instead.
func (*DatedBotReply) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{3}
}

func (x *DatedBotReply) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DatedBotReply) GetBotId() string {
	if x != nil && x.BotId != nil {
		return *x.BotId
	}
	return ""
}

func (x *DatedBotReply) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *DatedBotReply) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *DatedBotReply) GetOtherData() *JSON {
	if x != nil {
		return x.OtherData
	}
	return nil
}

// A batch of dated bot replies.
//
// This is the message which actually will be streamed to the server.
type StoreDatedBotReplyBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to identify this batch (required).
	//
	// This ID will be used by the server to later reference this batch.
	//
	// It is the responsibility of the client to use this ID wisely, the server will not verify uniqueness and will just use the ID it got from the client to reference batches.
	// It is recommended to simply use sequentially incrementing numbers per session.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The bot replies to include in this batch (required).
	Replies []*DatedBotReply `protobuf:"bytes,2,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (x *StoreDatedBotReplyBatchRequest) Reset() {
	*x = StoreDatedBotReplyBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedBotReplyBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedBotReplyBatchRequest) ProtoMessage() {}

func (x *StoreDatedBotReplyBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedBotReplyBatchRequest.ProtoReflect.Descriptor instead.
func (*StoreDatedBotReplyBatchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{4}
}

func (x *StoreDatedBotReplyBatchRequest) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *StoreDatedBotReplyBatchRequest) GetReplies() []*DatedBotReply {
	if x != nil {
		return x.Replies
	}
	return nil
}

// The response the server sends when receiving a dated bot reply batch.
type StoreDatedBotReplyBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the batch which was successfully received (required).
	//
	// The referenced batch can now be removed from the clients cache.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *StoreDatedBotReplyBatchResponse) Reset() {
	*x = StoreDatedBotReplyBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedBotReplyBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedBotReplyBatchResponse) ProtoMessage() {}

func (x *StoreDatedBotReplyBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedBotReplyBatchResponse.ProtoReflect.Descriptor instead.
func (*StoreDatedBotReplyBatchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{5}
}

func (x *StoreDatedBotReplyBatchResponse) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// The type which holds exactly one failed bot contact try.
//
// This message will be just used to fill batches which in turn will be sent.
type DatedFailedTry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp the (failed) bot contact try was attempted (required).
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The bot's ID, if any in the respective botnet (optional).
	BotId *string `protobuf:"bytes,2,opt,name=bot_id,json=botId,proto3,oneof" json:"bot_id,omitempty"`
	// The IP address of the bot (required).
	Ip *IPAddress `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// The port of the bot (required).
	Port *Port `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// The the reason the contacted bot could not be reached (optional).
	Reason *string `protobuf:"bytes,5,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// Potential other interesting data observed with the (failed) bot contact try (optional).
	OtherData *JSON `protobuf:"bytes,6,opt,name=other_data,json=otherData,proto3,oneof" json:"other_data,omitempty"`
}

func (x *DatedFailedTry) Reset() {
	*x = DatedFailedTry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatedFailedTry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatedFailedTry) ProtoMessage() {}

func (x *DatedFailedTry) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatedFailedTry.ProtoReflect.Descriptor instead.
func (*DatedFailedTry) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{6}
}

func (x *DatedFailedTry) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DatedFailedTry) GetBotId() string {
	if x != nil && x.BotId != nil {
		return *x.BotId
	}
	return ""
}

func (x *DatedFailedTry) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *DatedFailedTry) GetPort() *Port {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *DatedFailedTry) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *DatedFailedTry) GetOtherData() *JSON {
	if x != nil {
		return x.OtherData
	}
	return nil
}

// A batch of dated (failed) bot contact tries.
//
// This is the message which actually will be streamed to the server.
type StoreDatedFailedTryBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to identify this batch (required).
	//
	// This ID will be used by the server to later reference this batch.
	//
	// It is the responsibility of the client to use this ID wisely, the server will not verify uniqueness and will just use the ID it got from the client to reference batches.
	// It is recommended to simply use sequentially incrementing numbers per session.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The (failed) bot contact tries to include in this batch (required).
	Tries []*DatedFailedTry `protobuf:"bytes,2,rep,name=tries,proto3" json:"tries,omitempty"`
}

func (x *StoreDatedFailedTryBatchRequest) Reset() {
	*x = StoreDatedFailedTryBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedFailedTryBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedFailedTryBatchRequest) ProtoMessage() {}

func (x *StoreDatedFailedTryBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedFailedTryBatchRequest.ProtoReflect.Descriptor instead.
func (*StoreDatedFailedTryBatchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{7}
}

func (x *StoreDatedFailedTryBatchRequest) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *StoreDatedFailedTryBatchRequest) GetTries() []*DatedFailedTry {
	if x != nil {
		return x.Tries
	}
	return nil
}

// The response the server sends when receiving a dated (failed) bot contact try batch.
type StoreDatedFailedTryBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the batch which was successfully received (required).
	//
	// The referenced batch can now be removed from the clients cache.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *StoreDatedFailedTryBatchResponse) Reset() {
	*x = StoreDatedFailedTryBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedFailedTryBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedFailedTryBatchResponse) ProtoMessage() {}

func (x *StoreDatedFailedTryBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedFailedTryBatchResponse.ProtoReflect.Descriptor instead.
func (*StoreDatedFailedTryBatchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{8}
}

func (x *StoreDatedFailedTryBatchResponse) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// The type which holds exactly one edge.
//
// This message will be just used to fill batches which in turn will be sent.
type DatedEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp the edge was observed (required).
	Timestamp *Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The source bot's ID, if any in the respective botnet (optional).
	SrcBotId *string `protobuf:"bytes,2,opt,name=src_bot_id,json=srcBotId,proto3,oneof" json:"src_bot_id,omitempty"`
	// The IP address of the source bot (required).
	SrcIp *IPAddress `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	// The port of the source bot (required).
	SrcPort *Port `protobuf:"bytes,4,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	// The destination bot's ID, if any in the respective botnet (optional).
	DstBotId *string `protobuf:"bytes,5,opt,name=dst_bot_id,json=dstBotId,proto3,oneof" json:"dst_bot_id,omitempty"`
	// The IP address of the destination bot (required).
	DstIp *IPAddress `protobuf:"bytes,6,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	// The port of the destination bot (required).
	DstPort *Port `protobuf:"bytes,7,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
}

func (x *DatedEdge) Reset() {
	*x = DatedEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatedEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatedEdge) ProtoMessage() {}

func (x *DatedEdge) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatedEdge.ProtoReflect.Descriptor instead.
func (*DatedEdge) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{9}
}

func (x *DatedEdge) GetTimestamp() *Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DatedEdge) GetSrcBotId() string {
	if x != nil && x.SrcBotId != nil {
		return *x.SrcBotId
	}
	return ""
}

func (x *DatedEdge) GetSrcIp() *IPAddress {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *DatedEdge) GetSrcPort() *Port {
	if x != nil {
		return x.SrcPort
	}
	return nil
}

func (x *DatedEdge) GetDstBotId() string {
	if x != nil && x.DstBotId != nil {
		return *x.DstBotId
	}
	return ""
}

func (x *DatedEdge) GetDstIp() *IPAddress {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *DatedEdge) GetDstPort() *Port {
	if x != nil {
		return x.DstPort
	}
	return nil
}

// A batch of dated edges.
//
// This is the message which actually will be streamed to the server.
type StoreDatedEdgeBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID to identify this batch (required).
	//
	// This ID will be used by the server to later reference this batch.
	//
	// It is the responsibility of the client to use this ID wisely, the server will not verify uniqueness and will just use the ID it got from the client to reference batches.
	// It is recommended to simply use sequentially incrementing numbers per session.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	// The edges to include in this batch (required).
	Edges []*DatedEdge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *StoreDatedEdgeBatchRequest) Reset() {
	*x = StoreDatedEdgeBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedEdgeBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedEdgeBatchRequest) ProtoMessage() {}

func (x *StoreDatedEdgeBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedEdgeBatchRequest.ProtoReflect.Descriptor instead.
func (*StoreDatedEdgeBatchRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{10}
}

func (x *StoreDatedEdgeBatchRequest) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *StoreDatedEdgeBatchRequest) GetEdges() []*DatedEdge {
	if x != nil {
		return x.Edges
	}
	return nil
}

// The response the server sends when receiving a dated edge batch.
type StoreDatedEdgeBatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the batch which was successfully received (required).
	//
	// The referenced batch can now be removed from the clients cache.
	BatchId uint32 `protobuf:"varint,1,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
}

func (x *StoreDatedEdgeBatchResponse) Reset() {
	*x = StoreDatedEdgeBatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreDatedEdgeBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreDatedEdgeBatchResponse) ProtoMessage() {}

func (x *StoreDatedEdgeBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreDatedEdgeBatchResponse.ProtoReflect.Descriptor instead.
func (*StoreDatedEdgeBatchResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{11}
}

func (x *StoreDatedEdgeBatchResponse) GetBatchId() uint32 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// The request the client sends when initiating a disconnect (which in turn explicitly ends the session).
type DisconnectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reason the clients wants to end the session due (optional).
	Reason DisconnectReason `protobuf:"varint,1,opt,name=reason,proto3,enum=grpc_api.DisconnectReason" json:"reason,omitempty"`
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{12}
}

func (x *DisconnectRequest) GetReason() DisconnectReason {
	if x != nil {
		return x.Reason
	}
	return DisconnectReason_DISCONNECT_REASON_UNSPECIFIED
}

// The response the server sends when receiving a disconnect request.
type DisconnectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_storage_proto_rawDescGZIP(), []int{13}
}

var File_storage_proto protoreflect.FileDescriptor

var file_storage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x07, 0xba, 0x48, 0x04, 0x7a, 0x02, 0x68, 0x04, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xf0, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x08,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0c, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6a, 0x73,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x48, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x03, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x4f, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x51, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x22, 0x85, 0x02, 0x0a,
	0x0d, 0x44, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x1e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42,
	0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x48, 0x02,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6c, 0x0a, 0x1f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x79, 0x52, 0x05, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x3d, 0x0a, 0x20, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0xf0, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x72, 0x63, 0x42, 0x6f, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x64,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x64, 0x73, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x64, 0x73, 0x74,
	0x49, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x07, 0x64, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0xf0, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x33, 0x0a,
	0x2f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x05, 0x32, 0x91, 0x04, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x28,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x18, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x79,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x79, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x68, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0a,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x83, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x42, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x6f, 0x74, 0x6e, 0x65, 0x74, 0x2d, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x47, 0x72, 0x70, 0x63,
	0x41, 0x70, 0x69, 0xca, 0x02, 0x07, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0xe2, 0x02, 0x13,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x47, 0x72, 0x70, 0x63, 0x41, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storage_proto_rawDescOnce sync.Once
	file_storage_proto_rawDescData = file_storage_proto_rawDesc
)

func file_storage_proto_rawDescGZIP() []byte {
	file_storage_proto_rawDescOnce.Do(func() {
		file_storage_proto_rawDescData = protoimpl.X.CompressGZIP(file_storage_proto_rawDescData)
	})
	return file_storage_proto_rawDescData
}

var file_storage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_storage_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_storage_proto_goTypes = []interface{}{
	(DisconnectReason)(0),                    // 0: grpc_api.DisconnectReason
	(*SessionToken)(nil),                     // 1: grpc_api.SessionToken
	(*RegisterSessionRequest)(nil),           // 2: grpc_api.RegisterSessionRequest
	(*RegisterSessionResponse)(nil),          // 3: grpc_api.RegisterSessionResponse
	(*DatedBotReply)(nil),                    // 4: grpc_api.DatedBotReply
	(*StoreDatedBotReplyBatchRequest)(nil),   // 5: grpc_api.StoreDatedBotReplyBatchRequest
	(*StoreDatedBotReplyBatchResponse)(nil),  // 6: grpc_api.StoreDatedBotReplyBatchResponse
	(*DatedFailedTry)(nil),                   // 7: grpc_api.DatedFailedTry
	(*StoreDatedFailedTryBatchRequest)(nil),  // 8: grpc_api.StoreDatedFailedTryBatchRequest
	(*StoreDatedFailedTryBatchResponse)(nil), // 9: grpc_api.StoreDatedFailedTryBatchResponse
	(*DatedEdge)(nil),                        // 10: grpc_api.DatedEdge
	(*StoreDatedEdgeBatchRequest)(nil),       // 11: grpc_api.StoreDatedEdgeBatchRequest
	(*StoreDatedEdgeBatchResponse)(nil),      // 12: grpc_api.StoreDatedEdgeBatchResponse
	(*DisconnectRequest)(nil),                // 13: grpc_api.DisconnectRequest
	(*DisconnectResponse)(nil),               // 14: grpc_api.DisconnectResponse
	(*IPAddress)(nil),                        // 15: grpc_api.IPAddress
	(*Port)(nil),                             // 16: grpc_api.Port
	(*JSON)(nil),                             // 17: grpc_api.JSON
	(*Timestamp)(nil),                        // 18: grpc_api.Timestamp
}
var file_storage_proto_depIdxs = []int32{
	15, // 0: grpc_api.RegisterSessionRequest.public_ip:type_name -> grpc_api.IPAddress
	16, // 1: grpc_api.RegisterSessionRequest.monitor_port:type_name -> grpc_api.Port
	17, // 2: grpc_api.RegisterSessionRequest.config_json:type_name -> grpc_api.JSON
	1,  // 3: grpc_api.RegisterSessionResponse.session_token:type_name -> grpc_api.SessionToken
	18, // 4: grpc_api.RegisterSessionResponse.last_inserted_bot_reply:type_name -> grpc_api.Timestamp
	18, // 5: grpc_api.RegisterSessionResponse.last_inserted_failed_try:type_name -> grpc_api.Timestamp
	18, // 6: grpc_api.RegisterSessionResponse.last_inserted_edge:type_name -> grpc_api.Timestamp
	18, // 7: grpc_api.DatedBotReply.timestamp:type_name -> grpc_api.Timestamp
	15, // 8: grpc_api.DatedBotReply.ip:type_name -> grpc_api.IPAddress
	16, // 9: grpc_api.DatedBotReply.port:type_name -> grpc_api.Port
	17, // 10: grpc_api.DatedBotReply.other_data:type_name -> grpc_api.JSON
	4,  // 11: grpc_api.StoreDatedBotReplyBatchRequest.replies:type_name -> grpc_api.DatedBotReply
	18, // 12: grpc_api.DatedFailedTry.timestamp:type_name -> grpc_api.Timestamp
	15, // 13: grpc_api.DatedFailedTry.ip:type_name -> grpc_api.IPAddress
	16, // 14: grpc_api.DatedFailedTry.port:type_name -> grpc_api.Port
	17, // 15: grpc_api.DatedFailedTry.other_data:type_name -> grpc_api.JSON
	7,  // 16: grpc_api.StoreDatedFailedTryBatchRequest.tries:type_name -> grpc_api.DatedFailedTry
	18, // 17: grpc_api.DatedEdge.timestamp:type_name -> grpc_api.Timestamp
	15, // 18: grpc_api.DatedEdge.src_ip:type_name -> grpc_api.IPAddress
	16, // 19: grpc_api.DatedEdge.src_port:type_name -> grpc_api.Port
	15, // 20: grpc_api.DatedEdge.dst_ip:type_name -> grpc_api.IPAddress
	16, // 21: grpc_api.DatedEdge.dst_port:type_name -> grpc_api.Port
	10, // 22: grpc_api.StoreDatedEdgeBatchRequest.edges:type_name -> grpc_api.DatedEdge
	0,  // 23: grpc_api.DisconnectRequest.reason:type_name -> grpc_api.DisconnectReason
	2,  // 24: grpc_api.BMSStorageService.RegisterSession:input_type -> grpc_api.RegisterSessionRequest
	5,  // 25: grpc_api.BMSStorageService.StoreDatedBotReplyBatch:input_type -> grpc_api.StoreDatedBotReplyBatchRequest
	8,  // 26: grpc_api.BMSStorageService.StoreDatedFailedTryBatch:input_type -> grpc_api.StoreDatedFailedTryBatchRequest
	11, // 27: grpc_api.BMSStorageService.StoreDatedEdgeBatch:input_type -> grpc_api.StoreDatedEdgeBatchRequest
	13, // 28: grpc_api.BMSStorageService.Disconnect:input_type -> grpc_api.DisconnectRequest
	3,  // 29: grpc_api.BMSStorageService.RegisterSession:output_type -> grpc_api.RegisterSessionResponse
	6,  // 30: grpc_api.BMSStorageService.StoreDatedBotReplyBatch:output_type -> grpc_api.StoreDatedBotReplyBatchResponse
	9,  // 31: grpc_api.BMSStorageService.StoreDatedFailedTryBatch:output_type -> grpc_api.StoreDatedFailedTryBatchResponse
	12, // 32: grpc_api.BMSStorageService.StoreDatedEdgeBatch:output_type -> grpc_api.StoreDatedEdgeBatchResponse
	14, // 33: grpc_api.BMSStorageService.Disconnect:output_type -> grpc_api.DisconnectResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_storage_proto_init() }
func file_storage_proto_init() {
	if File_storage_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatedBotReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedBotReplyBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedBotReplyBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatedFailedTry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedFailedTryBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedFailedTryBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatedEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedEdgeBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreDatedEdgeBatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storage_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_storage_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_storage_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_storage_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_storage_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storage_proto_goTypes,
		DependencyIndexes: file_storage_proto_depIdxs,
		EnumInfos:         file_storage_proto_enumTypes,
		MessageInfos:      file_storage_proto_msgTypes,
	}.Build()
	File_storage_proto = out.File
	file_storage_proto_rawDesc = nil
	file_storage_proto_goTypes = nil
	file_storage_proto_depIdxs = nil
}
